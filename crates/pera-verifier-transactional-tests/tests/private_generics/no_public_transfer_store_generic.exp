processed 5 tasks

task 1, lines 10-19:
//# publish
Error: Transaction Effects Status: Pera Move Bytecode Verification Error. Please run the Pera Move Verifier for more information.
Execution Error: ExecutionError: ExecutionError { inner: ExecutionErrorInner { kind: PeraMoveVerificationError, source: Some("_::m::t. Invalid call to 'pera::transfer::transfer' on an object of type 'T0'. The transferred object's type must be defined in the current module. If the object has the 'store' type ability, you can use the non-internal variant instead, i.e. 'pera::transfer::public_transfer'"), command: Some(0) } }

task 2, lines 21-30:
//# publish
Error: Transaction Effects Status: Pera Move Bytecode Verification Error. Please run the Pera Move Verifier for more information.
Execution Error: ExecutionError: ExecutionError { inner: ExecutionErrorInner { kind: PeraMoveVerificationError, source: Some("_::m::t. Invalid call to 'pera::transfer::freeze_object' on an object of type 'T0'. The transferred object's type must be defined in the current module. If the object has the 'store' type ability, you can use the non-internal variant instead, i.e. 'pera::transfer::public_freeze_object'"), command: Some(0) } }

task 3, lines 32-41:
//# publish
Error: Transaction Effects Status: Pera Move Bytecode Verification Error. Please run the Pera Move Verifier for more information.
Execution Error: ExecutionError: ExecutionError { inner: ExecutionErrorInner { kind: PeraMoveVerificationError, source: Some("_::m::t. Invalid call to 'pera::transfer::share_object' on an object of type 'T0'. The transferred object's type must be defined in the current module. If the object has the 'store' type ability, you can use the non-internal variant instead, i.e. 'pera::transfer::public_share_object'"), command: Some(0) } }

task 4, lines 43-54:
//# publish
Error: Transaction Effects Status: Pera Move Bytecode Verification Error. Please run the Pera Move Verifier for more information.
Execution Error: ExecutionError: ExecutionError { inner: ExecutionErrorInner { kind: PeraMoveVerificationError, source: Some("_::m::t. Invalid call to 'pera::transfer::receive' on an object of type 'T0'. The transferred object's type must be defined in the current module. If the object has the 'store' type ability, you can use the non-internal variant instead, i.e. 'pera::transfer::public_receive'"), command: Some(0) } }
